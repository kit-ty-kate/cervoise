import Nat

open Nat

type alias Nat = Nat.T

foreign "GC_malloc" alloc : Int -[IO]-> Bytes

foreign "sprintf/2" fmt : Bytes -> Bytes -> Int -[IO]-> Unit

foreign "puts" println : Bytes -[IO]-> Unit

foreign ".labrys.add" add : Int -> Int -[IO]-> Int

let natToInt =
  let rec aux (acc : Int) (n : Nat) : IO # Int =
    match n with
    | O -> acc
    | S n -> aux (add 1 acc) n
    end
  in
  aux 0

let printNat (n : Nat) =
  let n = natToInt n in
  let buf = alloc 512 in
  fmt buf "%d" n;
  println buf

let plus =
  let rec aux (n : Nat) (m : Nat) : Nat.T =
    match n with
    | O -> m
    | S p -> aux p (S m)
    end
  in
  aux

let mult (n : Nat) (m : Nat) =
  let rec aux (acc : Nat) (n : Nat.T) (m : Nat.T) : IO # Nat.T =
    match n with
    | Nat.O -> acc
    | Nat.S p -> aux (plus m acc) p m
    end
  in
  aux O n m

let fact (n : Nat) =
  let rec aux (acc : Nat) (n : Nat) : IO # Nat =
    match n with
    | O -> acc
    | S x -> aux (mult n acc) x
    end
  in
  aux (S O) n

let main =
  printNat (fact O); -- 1
  printNat (fact (S O)); -- 1
  printNat (fact (S (S O))); -- 2
  printNat (fact (S (S (S O)))); -- 6
  printNat (fact (S (S (S (S O))))); -- 24
  printNat (fact (S (S (S (S (S O)))))); -- 120
  printNat (fact (S (S (S (S (S (S (S (S (S O)))))))))); -- 362880
  printNat (fact (S (S (S (S (S (S (S (S (S (S O))))))))))) -- 3628800
