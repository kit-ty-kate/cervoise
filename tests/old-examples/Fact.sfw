import Nat

open Nat

type alias Nat = Nat.T

foreign "GC_malloc" alloc : Int -[IO]-> Bytes

foreign "sprintf/2" fmt : Bytes -> Bytes -> Int -[IO]-> Unit

foreign "puts" println : Bytes -[IO]-> Unit

foreign ".labrys.add" add : Int -> Int -[IO]-> Int

let natToInt =
  let rec aux (acc : Int) (n : Nat) : IO # Int =
    match n with
    | O -> acc
    | S n -> aux (add 1 acc) n
    end
  in
  aux 0

let printNat (n : Nat) =
  let n = natToInt n in
  let buf = alloc 512 in
  fmt buf "%d" n;
  println buf

let rec plus (n : Nat.T) (m : Nat.T) : Nat.T =
  match n with
  | Nat.O -> m
  | Nat.S p -> Nat.S (plus p m)
  end

let rec mult =
  let y = Nat.O in
  let rec z = \() : Nat -> y in
  \(n : Nat.T) (m : Nat.T) : Nat.T ->
  match n with
  | Nat.O -> z Unit
  | Nat.S p -> plus m (mult p m)
  end

let rec fact (n : Nat.T) : Nat.T =
  match n with
  | O -> Nat.S Nat.O
  | Nat.S x -> mult (Nat.S x) (fact x)
  end

let main =
  printNat (fact O); -- 1
  printNat (fact (S O)); -- 1
  printNat (fact (S (S O))); -- 2
  printNat (fact (S (S (S O)))); -- 6
  printNat (fact (S (S (S (S O))))); -- 24
  printNat (fact (S (S (S (S (S O)))))); -- 120
  printNat (fact (S (S (S (S (S (S (S (S (S O)))))))))) -- 362880
