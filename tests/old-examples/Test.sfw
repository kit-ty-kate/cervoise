type Nat =
  | O
  | S Nat

foreign "GC_malloc" alloc : Int -[IO]-> Bytes

foreign "sprintf/2" fmt : Bytes -> Bytes -> Int -[IO]-> Unit

foreign "puts" println : Bytes -[IO]-> Unit

foreign ".labrys.add" add : Int -> Int -[IO]-> Int

let natToInt =
  let rec aux (acc : Int) (n : Nat) : IO # Int =
    match n with
    | O -> acc
    | S n -> aux (add 1 acc) n
    end
  in
  aux 0

let printNat (n : Nat) =
  let n = natToInt n in
  let buf = alloc 512 in
  fmt buf "%d" n;
  println buf

let app (x:Nat->Nat) (f:Nat->Nat->Nat) = f

let id (x:Nat) = x
let const (x:Nat) (y:Nat) = x

let curry = app id

let test = curry const

let main =
  let segfault = printNat (test O O) in
  Unit
