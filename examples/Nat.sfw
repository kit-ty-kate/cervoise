type T =
  | O
  | S T

foreign "GC_malloc" alloc : Int -[IO]-> Bytes

foreign va_arg(2) "sprintf" fmt : Bytes -> Bytes -> Int -[IO]-> Unit

foreign "puts" println : Bytes -[IO]-> Unit

foreign ".labrys.add" add : Int -> Int -[IO]-> Int

let natToInt =
  let rec aux (acc : Int) (n : T) : IO # Int =
    match n with
    | O -> acc
    | S n -> aux (add 1 acc) n
    end
  in
  aux 0

let print (n : T) =
  let n = natToInt n in
  let buf = alloc 512 in
  fmt buf "%d" n;
  println buf

let main = Unit
